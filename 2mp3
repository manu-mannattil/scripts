#!/usr/bin/env bash
#
# NAME
#
#   2mp3 - convert audio files into LAME encoded MP3s using ffmpeg.
#
# SYNOPSIS
#
#   2mp3 [-q <quality>] <input>...
#
# OPTIONS
#
#   -f            Force overwrite files.
#   -q <quality>  LAME preset [0-9] or bitrate (e.g., 192k)
#
#   Preset       Average Kbit/s              Kbit/s range
#   ------       --------------              ------------
#      0               245                     220..260
#      1               225                     190..250
#      2               190                     170..210
#      3               175                     150..195
#      4               165                     140..185
#      5               130                     120..150
#      6               115                     100..130
#      7               100                      80..120
#      8               85                       70..105
#      9               65                       45...85
#
#   For more see: http://wiki.hydrogenaud.io/index.php?title=LAME
#
# DESCRIPTION
#
#   2mp3 is a wrapper script around ffmpeg to convert audio files to
#   LAME encoded MP3s.  By default it will use the V0 LAME preset.  Note
#   that this script produces "bad" transcodes [1] since ffmpeg does
#   not produce MP3s which can be identified as encoded by LAME (i.e.,
#   no special LAME header tags).
#
# EXAMPLES
#
#   * Convert an FLAC into 192kbps CBR MP3:
#
#     $ 2mp3 -q 192 file.flac
#
#   * Convert all APEs in the current directory to MP3
#
#     $ parallel 2mp3 ::: *.ape
#
#   * Recursively convert all FLAC files in the current directory to MP3
#     with the LAME preset V2 in parallel:
#
#     $ find -type f -name '*.flac' | parallel 2mp3 -q 2
#
# DEPENDENCIES
#
#   ffmpeg(1)
#
# [1]: https://redacted.ch/wiki.php?action=article&id=295
#

set -eu
set -o pipefail

info() {
    echo >&2 "${0##*/}: $*"
}

force="no"
quality=( -q:a 0 )
partial="2MP3_PARTIAL_CONVERTION"

while getopts ":fhq:" opt
do
    case "$opt" in
        h)  echo >&2 "usage: 2mp3 [-q <quality>] <file>..."
            exit 0 ;;
        q)  if [[ "$OPTARG" =~ ^[Vv]?[0-9]$ ]]
            then
                quality=( -q:a "$OPTARG" )
            elif [[ "$OPTARG" =~ ^([0-9]{2,})[kK]? ]]
            then
                quality=( -b:a "${BASH_REMATCH[1]}k" )
            else
                echo >&2 "${0##*/}: invalid LAME preset/bitrate"
            fi ;;
        :)  info "$OPTARG requires an argument"
            exit 1 ;;
        \?) info "$OPTARG is not a valid option"
            exit 1 ;;
    esac
done
shift $(( OPTIND - 1 ))

if [[ "$*" ]]
then
    for file
    do
        # Check if a conversion was attempted previously and delete
        # partials if any.
        output="${file%.*}.mp3"
        [[ -f "$file.$partial" ]] && [[ -f "$output" ]] && {
            echo >&2 "${0##*/}: removing partial convertion '$output'"
            rm -f "$output" "$file.$partial"
        }

        [[ -f "$file" ]] || {
            echo >&2 "${0##*/}: '$file' is not a valid audio file; skipping."
            continue
        }

        [[ -f "$output" ]] && {
            echo >&2 "${0##*/}: '$file' already has an MP3 version"
            echo >&2 "${0##*/}: to force conversion, delete $output"
            continue
        }

        # Write input file name and quality to a temporary file,
        # and begin conversion.
        echo "file = $file; quality = ${quality[@]}" >"$file.$partial"
        if ffmpeg -v error        \
                  -y              \
                  -vn             \
                  -i "$file"      \
                  -c:a libmp3lame \
                  "${quality[@]}" \
                  "$output"
        then
            echo >&2 "${0##*/}: '$file' -> '$output'"
            rm -f "$file.$partial"
        else
            echo >&2 "${0##*/}: '$file' conversion failed!"
        fi
    done
else
    echo >&2 "usage: 2mp3 [-q <quality>] <file>..."
    exit 1
fi
