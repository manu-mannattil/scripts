#!/usr/bin/env bash
#
# NAME
#
#   ffind - friendly find wrapper
#
# SYNOPSIS
#
#   ffind <pattern> [<path>...] [<expression>...]
#
# DESCRIPTION
#
#   ffind is a friendly wrapper around find(1), which takes care of 90%
#   of my find(1)-use cases.  I wrote ffind primarily because I grew
#   tired of piping the output of find(1) to grep(1).
#
# OPTIONS
#
#   The first argument in the argument list must be a valid egrep(1)
#   pattern to match full file paths and the rest of the arguments can
#   be paths or find(1) expressions.
#
#   In addition to standard find(1) expressions the option "-ns" may
#   also be passed to disable "smartness".  In that case, the pattern
#   will be always matched case sensitively and all directories will be
#   scanned.
#
#   In case you do not want ffind to filter any results when more than
#   one argument is supplied, use an empty string '' as the pattern (or
#   even better, use find(1) instead).
#
# EXAMPLES
#
#   o   Search for PDF/PS files inside the subdirectory `physics' with
#       the word `mechanics' in their names
#
#         ffind 'physics\/.*mechanics.*\.(ps|pdf)$'
#
#   o   Recursively delete all temporary files (.~, .bak, .log, etc.)
#       from the current directory
#
#         ffind '\.(~|bak|log)$' -delete
#
#       or
#
#         ffind '\.(~|bak|log)$' -print0 | xargs -0 rm
#
#   o   Find all empty directories that start with an uppercase letter
#
#         ffind '/[A-Z][^/]*$' -type d -empty
#
# DEPENDENCIES
#
#   GNU version of find(1).
#
# BUGS
#
#   Yes.
#

[[ "$*" ]] || {
    echo >&2 "usage: ${0##*/} <pattern> [<path>...] [<expression>...]"
    exit 1
}

patt="$1"; shift
path=()

for arg
do
    # The first argument starting with a `-' is assumed to
    # begin the expression chain.
    if [[ "$arg" =~ ^-.* ]]
    then
        break
    elif [[ -d "$arg" ]]
    then
        path+=("$arg")
    else
        echo >&2 "${0##*/}: invalid path '$arg'; skipping"
    fi
    shift
done

# Disable smartness if -ns is passed as an argument.
smart="yes"
for arg
do
    [[ "$arg" == "-ns" ]] && { smart="no"; shift; break; }
done

# Default find args.  If find encounters a global option like -maxdepth
# after a test like -regex, then it will issue a warning; that's the
# reason why we're passing -nowarn.
args+=(
    -nowarn
    -regextype egrep
)

if [[ "$smart" == "yes" ]]
then
    args+=(
        # Ignore standard VCS directories.
        -not \(
            # Bazaar
            # http://bazaar.canonical.com/
            -path '*/.bzr/*'           -o

            # Codeville
            # http://freecode.com/projects/codeville
            -path '*/.cdv/*'           -o

            # Interface Builder (Xcode)
            # http://en.wikipedia.org/wiki/Interface_Builder
            -path '*/~.dep/*'          -o
            -path '*/~.dot/*'          -o
            -path '*/~.nib/*'          -o
            -path '*/~.plst/*'         -o

            # Git
            # http://git-scm.com/
            -path '*/.git/*'           -o

            # Mercurial
            # http://mercurial.selenic.com/
            -path '*/.hg/*'            -o

            # quilt
            # http://directory.fsf.org/wiki/Quilt
            -path '*/.pc/*'            -o

            # Subversion
            # http://subversion.tigris.org/
            -path '*/.svn/*'           -o

            # Monotone
            # http://www.monotone.ca/
            -path '*/_MTN/*'           -o

            # CVS
            # http://savannah.nongnu.org/projects/cvs
            -path '*/CVS/*'            -o

            # RCS
            # http://www.gnu.org/software/rcs/
            -path '*/RCS/*'            -o

            # SCCS
            # http://en.wikipedia.org/wiki/Source_Code_Control_System
            -path '*/SCCS/*'           -o

            # darcs
            # http://darcs.net/
            -path '*/_darcs/*'         -o

            # Vault/Fortress
            -path '*/_sgbak/*'         -o

            # autoconf
            # http://www.gnu.org/software/autoconf/
            -path '*/autom4te.cache/*' -o

            # Perl module building
            -path '*/blib/*'           -o
            -path '*/_build/*'         -o

            # Perl Devel::Cover module's output directory
            # https://metacpan.org/release/Devel-Cover
            -path '*/cover_db/*'       -o

            # Node modules created by npm
            -path '*/node_modules/*'   -o

            # CMake cache
            # http://www.cmake.org/
            -path '*/CMakeFiles/*'     -o

            # Eclipse workspace folder
            # http://eclipse.org/
            -path '*/.metadata/*'      -o

            # Cabal (Haskell) sandboxes
            # http://www.haskell.org/cabal/users-guide/installing-packages.html
            -path '*/.cabal-sandbox/*'
        \)
    )

    # Smart regex: if the pattern contains at least one upper-case
    # letter, assume that the user wants a case-sensitive search.
    [[ "$patt" =~ [A-Z] ]] && args+=(-regex) || args+=(-iregex)
else
    args+=(-regex)
fi

args+=(".*(${patt}.*|${patt}$)")
exec find "${path[@]}" "${args[@]}" "$@"
