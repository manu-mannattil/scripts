#!/usr/bin/env bash
#
# NAME
#
#   pass-print - convert a password store managed by pass into
#                a printable PDF.
#
# SYNOPSIS
#
#   pass-print [<output>.pdf]
#
# DESCRIPTION
#
#   pass-print will convert a password store managed by pass [1] into
#   a printable [2] PDF.  All passwords in your password store are
#   expected to have a prefix string that will match a fixed regular
#   expression.  This way, one can strip out the prefix string before
#   printing the passwords on a paper, thus adding an additional layer
#   of security.  Passwords not having a recognized prefix string will
#   not be printed.  In addition to this, every line in a password entry
#   beginning with a pipe '|' will also be printed.  This feature can be
#   used to print additional information like username, email, etc.
#
# CONFIGURATION
#
#   To use pass-print, first create a gpg2-encrypted configuration file
#   '.pass-print.conf' inside the $PASSWORD_STORE_DIR (by default
#   ~/.password-store).  This configuration file should be a shell
#   script that can be 'evaled' in Bash, and _must_ contain the variable
#   $PASSPRINT_PREFIX, which is an extended regular expression that will
#   match the prefix string of the passwords.  For example, if your
#   passwords always begin with 'hello' or 'world', you should add:
#
#       PASSPRINT_PREFIX="^(hello|world)"
#
#   The configuration file should also ideally have the
#   $PASSPRINT_EXCLUDE Bash array containing a list of entries that you
#   want to avoid printing.  For example,
#
#       PASSPRINT_EXCLUDE=("*/other/*" "*reddit*")
#
#   The contents of this array should be glob patterns that can be
#   passed to the -path option of find(1).
#
# DEPENDENCIES
#   
#   pdflatex(1), md5sum(1), mktemp(1), and pass(1)
#
# [1]: https://www.passwordstore.org
# [2]: https://www.schneier.com/blog/archives/2005/06/write_down_your.html
#

set -o pipefail
set -e

: "${PASSWORD_STORE_DIR:=${HOME}/.password-store}"
: "${PASSPRINT_CONF:=${PASSWORD_STORE_DIR}/.pass-print.conf}"

if command -v gpg2 &>/dev/null
then
    # If there's a executable called gpg2, it probably means that there
    # are two versions of GPG; we need GPG v2.
    GPG="gpg2"
else
    GPG="gpg"
fi

if [[ -f "$PASSPRINT_CONF" ]]
then
    eval "$("$GPG" --batch     \
                   --decrypt   \
                   --quiet     \
                   --use-agent \
                   --yes "$PASSPRINT_CONF" 2>/dev/null)" &>/dev/null
else
    echo >&2 "${0##*/}: '${PASSPRINT_CONF}' not found."
    exit 1
fi

# By default refuse to print all entries.
: "${PASSPRINT_PREFIX:=^$}"

# By default exclude all entries.
: "${PASSPRINT_EXCLUDE:=*}"

tmpdir="$(mktemp -d)"
trap 'rm -rf "$tmpdir" >/dev/null 2>&1' EXIT
trap 'exit 2' HUP INT QUIT TERM

# Arguments for the find command that will be run inside
# $PASSWORD_STORE_DIR.
find_args=("-type" "f" "-name" "*.gpg")
for entry in "${PASSPRINT_EXCLUDE[@]}"
do
    find_args+=( "!" "-path" "$entry" )
done

mklatex() {
    CPATH= cd "$PASSWORD_STORE_DIR"
    cat <<EOF
    \documentclass[twocolumn,10pt]{article}
    \usepackage[margin=0.25in]{geometry}
    \setlength\parindent{0pt}
    \renewcommand{\familydefault}{\ttdefault}
    \begin{document}
    \small
    \begin{verbatim}
EOF
    while IFS= read -r path
    do
        local entry=$(echo "$path" | sed 's|^\./||;s|.gpg$||')
        "$GPG" --batch --decrypt --quiet --use-agent --yes "$path" 2>/dev/null |
        awk -v entry="$entry" -v prefix="$PASSPRINT_PREFIX" '
            BEGIN {
                valid = 1
            }

            function warn(string) {
                printf("pass-print: %s\n", string) >"/dev/stderr"
            }

            (NR == 1) {
                if ($0 !~ prefix) {
                    warn(sprintf("password for \"%s\" does not have a valid prefix.", entry))
                    warn(sprintf("refusing to print \"%s\".", entry))

                    valid = 0
                    exit
                } else {
                    sub(prefix, "")
                    sub("[[:space:]]+$", "")

                    printf("%s\n", entry)
                    printf("  %s\n", $0)
                }
            }

            /^\|/ && (NR != 1) {
                sub("^\\|[[:space:]]{,2}", "")
                sub("[[:space:]]+$", "")
                printf("  %s\n", $0)
            }

            END {
                if (valid)
                    printf("\n")
            }
        '
    done < <(find "${find_args[@]}" | sort)

    # Use latest commit date or LaTeX's \today for the timestamp.
    local date=$(git log -1 --format='%cd [%h]' 2>/dev/null || echo "\today")

    # A random string to uniquely `tag' PDF files.
    local randstr=$(head /dev/urandom | md5sum | cut -d ' ' -f 1)

    cat <<EOF
    \end{verbatim}
    ** $randstr

    ** $date
    \end{document}
EOF
    cd "$OLDPWD"
}

mkpdf() {
    # For reasons I don't understand (nor have the patience to), piping
    # to pdflatex doesn't work well.
    mklatex >"${tmpdir}/texput.tex"
    if pdflatex -interaction=nonstopmode    \
                -output-directory "$tmpdir" \
                "${tmpdir}/texput.tex" &>/dev/null
    then
        mv "${tmpdir}/texput.pdf" -- "$1" && echo >&2 "${0##*/}: output written to '${1}'"
    else
        echo >&2 "${0##*/}: error compiling LaTeX source"
        cat "${tmpdir}/texput.log"
        exit 1
    fi
}

[[ -n "$*" ]] || set -- "$(date +%Y-%m-%d).pdf"
mkpdf "$1"
