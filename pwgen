#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# NAME
#
#   pwgen - generate random passwords
#
# SYNOPSIS
#
#   pwgen [-h] [-u] [-l] [-d] [-s] [LENGTH]
#
# OPTIONS
#
#   Positional arguments
#
#     LENGTH         length of password (must be >= 4)
#
#   Optional arguments
#
#     -h, --help     show this help message and exit
#     -u, --upper    suppress uppercase characters
#     -l, --lower    suppress lowercase characters
#     -d, --digit    suppress digits
#     -s, --special  suppress special characters
#

import argparse
import secrets

UPPER = r"ABCDEFGHJKMNPQRSTUVWXYZ"
LOWER = r"abcdefghjkmnpqrstuvwxyz"
DIGIT = r"23456789"
SPECIAL = r"!#$%&*+-/:<=>?@\~"

def generate(length: int = 32,
             lower: bool = True,
             upper: bool = True,
             digit: bool = True,
             special: bool = True) -> str:
    """Generate a random password."""
    random = secrets.SystemRandom()
    passwd = []
    char_pool = []

    # Ensure that characters of each kind are present at least once.
    if upper:
        passwd.append(random.choice(UPPER))
        char_pool.extend(UPPER)

    if lower:
        passwd.append(random.choice(LOWER))
        char_pool.extend(LOWER)

    if digit:
        passwd.append(random.choice(DIGIT))
        char_pool.extend(DIGIT)

    if special:
        passwd.append(random.choice(SPECIAL))
        char_pool.extend(SPECIAL)

    passwd.extend([random.choice(char_pool) for _ in range(length - len(passwd))])
    random.shuffle(passwd)

    return "".join(passwd)

def main():
    """Argument parsing."""
    parser = argparse.ArgumentParser(prog="pwgen", description="generate random passwords")

    parser.add_argument("length",
                        type=int,
                        default=32,
                        metavar="LENGTH",
                        nargs="?",
                        help="length of password (>= 4)")
    parser.add_argument("-u",
                        "--upper",
                        action="store_false",
                        default=True,
                        help="suppress uppercase characters")
    parser.add_argument("-l",
                        "--lower",
                        action="store_false",
                        default=True,
                        help="suppress lowercase characters")
    parser.add_argument("-d", "--digit", action="store_false", default=True, help="suppress digits")
    parser.add_argument("-s",
                        "--special",
                        action="store_false",
                        default=True,
                        help="suppress special characters")

    args = parser.parse_args()

    # Make sure that we have at least one character set to generate
    # passwords from.
    if not any((args.upper, args.lower, args.digit, args.special)):
        parser.error("at least one of -u, -l, -d, or -s must be omitted")
    elif args.length < 4:
        parser.error(f"argument LENGTH: must be >=4")

    print(generate(length=args.length,
                   upper=args.upper,
                   lower=args.lower,
                   digit=args.digit,
                   special=args.special))

if __name__ == "__main__":
    main()
