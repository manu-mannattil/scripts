#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# NAME
#
#   pwgen - generate random passwords
#
# SYNOPSIS
#
#   pwgen [-h] [-u] [-l] [-d] [-s] [LENGTH]
#
# OPTIONS
#
#   Positional arguments
#
#     LENGTH         length of password (must be >= 4)
#
#   Optional arguments
#
#     -h, --help     show this help message and exit
#     -u, --upper    suppress upper characters
#     -l, --lower    suppress lower characters
#     -d, --digit    suppress digits
#     -s, --special  suppress special characters
#

from __future__ import print_function
from random import SystemRandom

import argparse

LOWER = list("abcdefghjkmnpqrstuvwxyz")
UPPER = list("ABCDEFGHJKMNPQRSTUVWXYZ")
DIGIT = list("23456789")
SPECIAL = list("!#$%&*+-/:<=>?@\~")


def generate(length=32, lower=True, upper=True, digit=True, special=True):
    random = SystemRandom()
    passwd = list()
    char_pool = list()

    # Ensure that characters of each kind are present at least once.
    if upper:
        passwd.append(random.choice(UPPER))
        char_pool.extend(UPPER)

    if lower:
        passwd.append(random.choice(LOWER))
        char_pool.extend(LOWER)

    if digit:
        passwd.append(random.choice(DIGIT))
        char_pool.extend(DIGIT)

    if special:
        passwd.append(random.choice(SPECIAL))
        char_pool.extend(SPECIAL)

    passwd.extend([random.choice(char_pool) for i in range(length - len(passwd))])
    random.shuffle(passwd)

    return "".join(passwd)


def passwd_length(length):
    length = int(length)
    if length < 4:
        raise argparse.ArgumentTypeError("must be >= 4")
    else:
        return length


def main():
    parser = argparse.ArgumentParser(
        prog="pwgen", description="generate random passwords"
    )

    parser.add_argument(
        "length",
        type=passwd_length,
        default=32,
        metavar="LENGTH",
        nargs="?",
        help="length of password (must be >= 4)",
    )
    parser.add_argument(
        "-u",
        "--upper",
        action="store_false",
        default=True,
        help="suppress upper characters",
    )
    parser.add_argument(
        "-l",
        "--lower",
        action="store_false",
        default=True,
        help="suppress lower characters",
    )
    parser.add_argument(
        "-d", "--digit", action="store_false", default=True, help="suppress digits"
    )
    parser.add_argument(
        "-s",
        "--special",
        action="store_false",
        default=True,
        help="suppress special characters",
    )

    args = parser.parse_args()
    print(
        generate(
            length=args.length,
            upper=args.upper,
            lower=args.lower,
            digit=args.digit,
            special=args.special,
        )
    )


if __name__ == "__main__":
    main()
